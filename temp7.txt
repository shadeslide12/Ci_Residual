#include <QChartView>
#include <QValueAxis>
#include <QLineSeries>
#include <QtCharts>

class ChartWidget : public QWidget
{
    Q_OBJECT
public:
    ChartWidget(QWidget *parent = nullptr) : QWidget(parent)
    {
        // 创建图表
        QChart *chart = new QChart();

        // 创建数据系列
        QLineSeries *series = new QLineSeries();

        // 添加数据点
        for(int i = 0; i < 100; ++i) {
            series->append(i, qSin(i/10.0) * 10);
        }

        chart->addSeries(series);

        // 创建坐标轴
        QValueAxis *axisX = new QValueAxis;
        QValueAxis *axisY = new QValueAxis;

        // 将坐标轴添加到图表
        chart->addAxis(axisX, Qt::AlignBottom);
        chart->addAxis(axisY, Qt::AlignLeft);

        // 将系列附加到坐标轴
        series->attachAxis(axisX);
        series->attachAxis(axisY);

        // 启用自动缩放
        setupAutoScale(chart, series);

        // 创建图表视图
        QChartView *chartView = new QChartView(chart);
        chartView->setRenderHint(QPainter::Antialiasing);

        // 布局
        QVBoxLayout *layout = new QVBoxLayout;
        layout->addWidget(chartView);
        setLayout(layout);
    }

private:
    void setupAutoScale(QChart *chart, QAbstractSeries *series)
    {
        // 获取数据范围
        qreal minX = std::numeric_limits<qreal>::max();
        qreal maxX = std::numeric_limits<qreal>::min();
        qreal minY = std::numeric_limits<qreal>::max();
        qreal maxY = std::numeric_limits<qreal>::min();

        // 如果是折线系列
        if (QLineSeries *lineSeries = qobject_cast<QLineSeries*>(series)) {
            const auto points = lineSeries->points();
            for (const QPointF &point : points) {
                minX = qMin(minX, point.x());
                maxX = qMax(maxX, point.x());
                minY = qMin(minY, point.y());
                maxY = qMax(maxY, point.y());
            }
        }

        // 添加边距（比如10%）
        qreal marginX = (maxX - minX) * 0.1;
        qreal marginY = (maxY - minY) * 0.1;

        // 设置轴范围
        QValueAxis *axisX = qobject_cast<QValueAxis*>(chart->axes(Qt::Horizontal).first());
        QValueAxis *axisY = qobject_cast<QValueAxis*>(chart->axes(Qt::Vertical).first());

        if (axisX && axisY) {
            axisX->setRange(minX - marginX, maxX + marginX);
            axisY->setRange(minY - marginY, maxY + marginY);

            // 使用优化的刻度值
            axisX->applyNiceNumbers();
            axisY->applyNiceNumbers();
        }
    }
};